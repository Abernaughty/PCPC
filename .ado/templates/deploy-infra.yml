parameters:
  - name: environment
    type: string
    values:
      - dev
      - staging
      - prod
  - name: azureSubscription
    type: string
  - name: workingDirectory
    type: string
    default: "infra/envs"
  - name: terraformVersion
    type: string
    default: "1.13.3"

steps:
  - checkout: self
    displayName: "Checkout Source Code"

  - task: TerraformInstaller@1
    displayName: "Install Terraform"
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}

  - task: AzureCLI@2
    displayName: "Verify Backend Storage"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        echo "Verifying Terraform backend storage..."

        # Check if storage account exists
        if az storage account show \
          --name $(TF_STATE_STORAGE_ACCOUNT) \
          --resource-group $(TF_STATE_RESOURCE_GROUP) &>/dev/null; then
          echo "✓ Storage account exists: $(TF_STATE_STORAGE_ACCOUNT)"
        else
          echo "✗ Storage account not found: $(TF_STATE_STORAGE_ACCOUNT)"
          exit 1
        fi

        # Check if container exists
        if az storage container show \
          --name $(TF_STATE_CONTAINER) \
          --account-name $(TF_STATE_STORAGE_ACCOUNT) \
          --auth-mode login &>/dev/null; then
          echo "✓ Container exists: $(TF_STATE_CONTAINER)"
        else
          echo "✗ Container not found: $(TF_STATE_CONTAINER)"
          exit 1
        fi

        echo "Backend storage verification complete"

  - task: AzureCLI@2
    displayName: "Terraform Init"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        echo "Initializing Terraform for ${{ parameters.environment }} environment..."

        terraform init \
          -backend-config="resource_group_name=$(TF_STATE_RESOURCE_GROUP)" \
          -backend-config="storage_account_name=$(TF_STATE_STORAGE_ACCOUNT)" \
          -backend-config="container_name=$(TF_STATE_CONTAINER)" \
          -backend-config="key=${{ parameters.environment }}.terraform.tfstate"

        echo "Terraform initialization complete"

  - task: AzureCLI@2
    displayName: "Terraform Validate"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        echo "Validating Terraform configuration..."
        terraform validate
        echo "Validation complete"

  - task: AzureCLI@2
    displayName: "Generate Secrets Configuration"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        echo "=========================================="
        echo "Generating Secrets Configuration"
        echo "=========================================="
        echo ""
        echo "Environment: ${{ parameters.environment }}"
        echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo ""

        # DEBUG: Check if secret variables are available as environment variables
        echo "DEBUG: Checking secret environment variables..."
        echo "-----------------------------------------------"

        # Check each secret variable (mapped via env: parameter)
        if [ -z "${POKEDATA_API_KEY}" ]; then
          echo "  ❌ POKEDATA_API_KEY is NOT SET or EMPTY"
        else
          echo "  ✅ POKEDATA_API_KEY is set (length: ${#POKEDATA_API_KEY})"
        fi

        if [ -z "${POKEMON_TCG_API_KEY}" ]; then
          echo "  ❌ POKEMON_TCG_API_KEY is NOT SET or EMPTY"
        else
          echo "  ✅ POKEMON_TCG_API_KEY is set (length: ${#POKEMON_TCG_API_KEY})"
        fi

        if [ -z "${ARM_CLIENT_ID}" ]; then
          echo "  ❌ ARM_CLIENT_ID is NOT SET or EMPTY"
        else
          echo "  ✅ ARM_CLIENT_ID is set (length: ${#ARM_CLIENT_ID})"
        fi

        if [ -z "${ARM_CLIENT_SECRET}" ]; then
          echo "  ❌ ARM_CLIENT_SECRET is NOT SET or EMPTY"
        else
          echo "  ✅ ARM_CLIENT_SECRET is set (length: ${#ARM_CLIENT_SECRET})"
        fi

        if [ -z "${PORKBUN_API_KEY}" ]; then
          echo "  ❌ PORKBUN_API_KEY is NOT SET or EMPTY"
        else
          echo "  ✅ PORKBUN_API_KEY is set (length: ${#PORKBUN_API_KEY})"
        fi

        if [ -z "${PORKBUN_SECRET_KEY}" ]; then
          echo "  ❌ PORKBUN_SECRET_KEY is NOT SET or EMPTY"
        else
          echo "  ✅ PORKBUN_SECRET_KEY is set (length: ${#PORKBUN_SECRET_KEY})"
        fi
        echo ""

        # Create secrets.auto.tfvars file using bash environment variables
        echo "Creating secrets.auto.tfvars file..."
        cat > secrets.auto.tfvars <<EOF
        # Auto-generated secrets file - DO NOT COMMIT
        # Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        # Environment: ${{ parameters.environment }}
        # 
        # This file is automatically created during pipeline execution
        # and contains secrets from variable group (mapped via env: parameter).
        # It is automatically cleaned up after the pipeline completes.

        porkbun_api_key    = "$PORKBUN_API_KEY"
        porkbun_secret_key = "$PORKBUN_SECRET_KEY"

        function_app_secrets = {
          # API Keys from variable group (with underscores)
          "POKEDATA_API_KEY"     = "$POKEDATA_API_KEY"
          "POKEMON_TCG_API_KEY"  = "$POKEMON_TCG_API_KEY"
          "PORKBUN_API_KEY"      = "$PORKBUN_API_KEY"
          "PORKBUN_SECRET_KEY"   = "$PORKBUN_SECRET_KEY"

          # Service Principal Credentials
          "ARM_CLIENT_ID"        = "$ARM_CLIENT_ID"
          "ARM_CLIENT_SECRET"    = "$ARM_CLIENT_SECRET"
        }
        EOF

        echo "✓ Secrets configuration file generated"
        echo "  File: secrets.auto.tfvars"
        echo ""

        # DEBUG: Show file structure (values redacted)
        echo "DEBUG: File structure (values redacted):"
        echo "-----------------------------------------------"
        sed 's/= ".*"/= "[REDACTED]"/' secrets.auto.tfvars | head -n 20
        echo "-----------------------------------------------"
        echo ""

        # DEBUG: Check if values are actually present (not empty strings)
        echo "DEBUG: Verifying secret values are not empty..."
        EMPTY_COUNT=0
        while IFS= read -r line; do
          if [[ $line =~ \"([^\"]+)\"[[:space:]]*=[[:space:]]*\"\"[[:space:]]*$ ]]; then
            key="${BASH_REMATCH[1]}"
            echo "  ❌ $key has EMPTY value"
            EMPTY_COUNT=$((EMPTY_COUNT + 1))
          elif [[ $line =~ \"([^\"]+)\"[[:space:]]*=[[:space:]]*\"(.+)\" ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            echo "  ✅ $key has value (length: ${#value})"
          fi
        done < secrets.auto.tfvars

        if [ $EMPTY_COUNT -gt 0 ]; then
          echo ""
          echo "❌ ERROR: Found $EMPTY_COUNT empty secret values!"
          echo "This means the env: mapping is not working correctly."
          exit 1
        fi
        echo ""

        # Verify file was created and has reasonable size
        if [ -f "secrets.auto.tfvars" ]; then
          FILE_SIZE=$(wc -c < secrets.auto.tfvars)
          echo "✓ File verification passed"
          echo "  Size: ${FILE_SIZE} bytes"
          
          # Verify file is not empty
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "❌ File appears to be empty or incomplete"
            exit 1
          fi
        else
          echo "❌ File creation failed"
          exit 1
        fi

        echo ""
        echo "=========================================="
        echo "Secrets configuration ready for Terraform"
        echo "=========================================="
        echo ""
    env:
      POKEDATA_API_KEY: $(POKEDATA_API_KEY)
      POKEMON_TCG_API_KEY: $(POKEMON_TCG_API_KEY)
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      PORKBUN_API_KEY: $(PORKBUN-API-KEY)
      PORKBUN_SECRET_KEY: $(PORKBUN-SECRET-KEY)

  - task: AzureCLI@2
    name: TerraformPlan
    displayName: "Terraform Plan"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        echo "Generating Terraform execution plan for ${{ parameters.environment }}..."
        echo ""

        # Verify secrets file exists before planning
        if [ ! -f "secrets.auto.tfvars" ]; then
          echo "✗ Secrets configuration file not found"
          echo "  Expected: secrets.auto.tfvars"
          exit 1
        fi

        echo "✓ Secrets configuration file found"
        echo ""

        # Run terraform plan
        # Note: secrets.auto.tfvars is automatically loaded by Terraform
        terraform plan \
          -var="environment=${{ parameters.environment }}" \
          -out=tfplan \
          -detailed-exitcode || EXIT_CODE=$?

        # Exit codes: 0 = no changes, 1 = error, 2 = changes present
        if [ "${EXIT_CODE}" == "1" ]; then
          echo "✗ Terraform plan failed"
          exit 1
        elif [ "${EXIT_CODE}" == "2" ]; then
          echo "✓ Changes detected - plan generated"
          echo "##vso[task.setvariable variable=HasChanges;isOutput=true]true"
        else
          echo "✓ No changes detected"
          echo "##vso[task.setvariable variable=HasChanges;isOutput=true]false"
        fi

  - task: AzureCLI@2
    displayName: "Terraform Apply"
    condition: and(succeeded(), eq(variables['TerraformPlan.HasChanges'], 'true'))
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        set -euo pipefail

        echo "Applying Terraform changes for ${{ parameters.environment }}..."
        echo ""

        # Verify secrets file exists before applying
        if [ ! -f "secrets.auto.tfvars" ]; then
          echo "✗ Secrets configuration file not found"
          echo "  Expected: secrets.auto.tfvars"
          exit 1
        fi

        echo "✓ Secrets configuration file found"
        echo ""

        # Apply the plan
        # Note: secrets.auto.tfvars is automatically loaded by Terraform
        if ! terraform apply -auto-approve tfplan; then
          APPLY_EXIT_CODE=${PIPESTATUS[0]}
          echo ""
          echo "✗ Terraform apply failed with exit code ${APPLY_EXIT_CODE}"
          exit $APPLY_EXIT_CODE
        fi

        echo ""
        echo "✓ Terraform apply complete"

  - task: AzureCLI@2
    displayName: "Capture Terraform Outputs"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        echo "Capturing Terraform outputs..."

        # Get all outputs in JSON format
        terraform output -json > outputs.json

        # Extract key outputs and set as pipeline variables
        RESOURCE_GROUP=$(terraform output -raw resource_group_name 2>/dev/null || echo "")
        FUNCTION_APP=$(terraform output -raw function_app_name 2>/dev/null || echo "")
        STATIC_WEB_APP=$(terraform output -raw static_web_app_name 2>/dev/null || echo "")
        COSMOS_ENDPOINT=$(terraform output -raw cosmos_db_endpoint 2>/dev/null || echo "")
        STORAGE_ACCOUNT=$(terraform output -raw storage_account_name 2>/dev/null || echo "")

        # Set pipeline variables for downstream jobs
        echo "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$RESOURCE_GROUP"
        echo "##vso[task.setvariable variable=FunctionAppName;isOutput=true]$FUNCTION_APP"
        echo "##vso[task.setvariable variable=StaticWebAppName;isOutput=true]$STATIC_WEB_APP"
        echo "##vso[task.setvariable variable=CosmosEndpoint;isOutput=true]$COSMOS_ENDPOINT"
        echo "##vso[task.setvariable variable=StorageAccountName;isOutput=true]$STORAGE_ACCOUNT"

        echo "Terraform outputs captured:"
        echo "  Resource Group: $RESOURCE_GROUP"
        echo "  Function App: $FUNCTION_APP"
        echo "  Static Web App: $STATIC_WEB_APP"
        echo "  Cosmos DB: $COSMOS_ENDPOINT"
        echo "  Storage Account: $STORAGE_ACCOUNT"

  - task: AzureCLI@2
    displayName: "Post-Deployment Validation"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        echo "Validating deployed infrastructure..."

        RESOURCE_GROUP=$(terraform output -raw resource_group_name)

        # Verify resource group exists
        if az group show --name "$RESOURCE_GROUP" &>/dev/null; then
          echo "✓ Resource group exists: $RESOURCE_GROUP"
        else
          echo "✗ Resource group not found: $RESOURCE_GROUP"
          exit 1
        fi

        # Count deployed resources
        RESOURCE_COUNT=$(az resource list --resource-group "$RESOURCE_GROUP" --query "length(@)")
        echo "✓ Found $RESOURCE_COUNT resources in resource group"

        # Verify key resources exist
        FUNCTION_APP=$(terraform output -raw function_app_name 2>/dev/null || echo "")
        if [ -n "$FUNCTION_APP" ]; then
          if az functionapp show --name "$FUNCTION_APP" --resource-group "$RESOURCE_GROUP" &>/dev/null; then
            echo "✓ Function App exists: $FUNCTION_APP"
          else
            echo "⚠ Function App not found: $FUNCTION_APP"
          fi
        fi

        STATIC_WEB_APP=$(terraform output -raw static_web_app_name 2>/dev/null || echo "")
        if [ -n "$STATIC_WEB_APP" ]; then
          if az staticwebapp show --name "$STATIC_WEB_APP" --resource-group "$RESOURCE_GROUP" &>/dev/null; then
            echo "✓ Static Web App exists: $STATIC_WEB_APP"
          else
            echo "⚠ Static Web App not found: $STATIC_WEB_APP"
          fi
        fi

        COSMOS_ACCOUNT=$(terraform output -raw cosmos_db_account_name 2>/dev/null || echo "")
        if [ -n "$COSMOS_ACCOUNT" ]; then
          if az cosmosdb show --name "$COSMOS_ACCOUNT" --resource-group "$RESOURCE_GROUP" &>/dev/null; then
            echo "✓ Cosmos DB exists: $COSMOS_ACCOUNT"
          else
            echo "⚠ Cosmos DB not found: $COSMOS_ACCOUNT"
          fi
        fi

        echo "Post-deployment validation complete"

  - task: PublishPipelineArtifact@1
    displayName: "Publish Terraform Outputs"
    inputs:
      targetPath: "${{ parameters.workingDirectory }}/${{ parameters.environment }}/outputs.json"
      artifact: "terraform-outputs-${{ parameters.environment }}"
      publishLocation: "pipeline"

  - task: AzureCLI@2
    displayName: "Display Deployment Summary"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: "bash"
      scriptLocation: "inlineScript"
      workingDirectory: "${{ parameters.workingDirectory }}/${{ parameters.environment }}"
      inlineScript: |
        echo ""
        echo "=========================================="
        echo "Infrastructure Deployment Summary"
        echo "=========================================="
        echo "Environment: ${{ upper(parameters.environment) }}"
        echo "Resource Group: $(terraform output -raw resource_group_name)"
        echo "Function App: $(terraform output -raw function_app_name 2>/dev/null || echo 'N/A')"
        echo "Static Web App: $(terraform output -raw static_web_app_name 2>/dev/null || echo 'N/A')"
        echo "Cosmos DB: $(terraform output -raw cosmos_db_account_name 2>/dev/null || echo 'N/A')"
        echo "Storage Account: $(terraform output -raw storage_account_name 2>/dev/null || echo 'N/A')"
        echo "=========================================="
        echo ""
