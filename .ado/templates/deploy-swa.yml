# Static Web App Deployment Template
# Environment-agnostic deployment for Dev/Staging/Prod
# Includes artifact verification, deployment, and smoke tests

parameters:
  - name: environment
    type: string
    displayName: "Target environment (dev/staging/prod)"
  - name: azureSubscription
    type: string
    displayName: "Azure service connection name"
  - name: staticWebAppName
    type: string
    displayName: "Static Web App name"
  - name: resourceGroupName
    type: string
    displayName: "Resource group name"

steps:
  # Checkout source for smoke test scripts
  - checkout: self
    displayName: "Checkout Source"

  # Download build artifact
  - download: current
    artifact: drop
    displayName: "Download Build Artifact"

  # Display deployment information
  - script: |
      echo "=========================================="
      echo "STATIC WEB APP DEPLOYMENT"
      echo "=========================================="
      echo "Environment: ${{ parameters.environment }}"
      echo "Static Web App: ${{ parameters.staticWebAppName }}"
      echo "Resource Group: ${{ parameters.resourceGroupName }}"
      echo "Azure Subscription: ${{ parameters.azureSubscription }}"
      echo "Artifact Path: $(Pipeline.Workspace)/drop"
      echo "=========================================="
    displayName: "Display Deployment Info"

  # Verify artifact integrity
  - script: |
      echo "Verifying artifact integrity..."

      ARTIFACT_PATH="$(Pipeline.Workspace)/drop"

      # Check if checksums file exists
      if [ ! -f "$ARTIFACT_PATH/checksums.txt" ]; then
        echo "ERROR: checksums.txt not found in artifact"
        exit 1
      fi

      # Verify checksums
      cd "$ARTIFACT_PATH"
      if sha256sum -c checksums.txt; then
        echo "✓ Artifact integrity verified successfully"
      else
        echo "ERROR: Artifact integrity check failed"
        exit 1
      fi

      # Verify SWA directory exists
      if [ ! -d "$ARTIFACT_PATH/swa" ]; then
        echo "ERROR: swa/ directory not found in artifact"
        exit 1
      fi

      # List SWA contents
      echo ""
      echo "SWA artifact contents:"
      ls -lh "$ARTIFACT_PATH/swa/"

      # Verify critical files
      REQUIRED_FILES=("index.html" "main.js" "bundle.css")
      for file in "${REQUIRED_FILES[@]}"; do
        if [ ! -f "$ARTIFACT_PATH/swa/$file" ]; then
          echo "ERROR: Required file $file not found in swa/"
          exit 1
        fi
        echo "✓ Found: $file"
      done

      echo ""
      echo "✓ All required files present"
    displayName: "Verify Artifact Integrity"

  # Verify deployment paths and environment
  - script: |
      echo "=========================================="
      echo "PRE-DEPLOYMENT DIAGNOSTICS"
      echo "=========================================="
      echo ""
      echo "Pipeline Variables:"
      echo "  Pipeline.Workspace: $(Pipeline.Workspace)"
      echo "  System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
      echo "  Build.SourcesDirectory: $(Build.SourcesDirectory)"
      echo ""
      echo "Current Working Directory:"
      pwd
      echo ""
      echo "Pipeline Workspace Contents:"
      ls -lah "$(Pipeline.Workspace)/" || echo "Pipeline.Workspace not accessible"
      echo ""
      echo "Drop Artifact Contents:"
      ls -lah "$(Pipeline.Workspace)/drop/" || echo "drop/ directory not found"
      echo ""
      echo "SWA Directory Contents:"
      if [ -d "$(Pipeline.Workspace)/drop/swa" ]; then
        echo "✓ SWA directory found at: $(Pipeline.Workspace)/drop/swa"
        ls -lah "$(Pipeline.Workspace)/drop/swa/"
        echo ""
        echo "SWA Directory Size:"
        du -sh "$(Pipeline.Workspace)/drop/swa"
        echo ""
        echo "Critical Files Check:"
        for file in index.html main.js bundle.css staticwebapp.config.json; do
          if [ -f "$(Pipeline.Workspace)/drop/swa/$file" ]; then
            echo "  ✓ $file"
          else
            echo "  ✗ $file (missing)"
          fi
        done
      else
        echo "✗ SWA directory NOT found at: $(Pipeline.Workspace)/drop/swa"
        echo ""
        echo "Searching for swa directory..."
        find "$(Pipeline.Workspace)" -type d -name "swa" 2>/dev/null || echo "No swa directory found"
      fi
      echo ""
      echo "=========================================="
    displayName: "Pre-Deployment Diagnostics"

  # Calculate deterministic hash for SWA artifact to detect meaningful changes
  - script: |
      set -euo pipefail

      ARTIFACT_DIR="$(Pipeline.Workspace)/drop/swa"

      if [ ! -d "$ARTIFACT_DIR" ]; then
        echo "ERROR: Static Web App artifact directory not found at $ARTIFACT_DIR"
        exit 1
      fi

      echo "Calculating Static Web App artifact hash..."

      export ARTIFACT_DIR
      HASH=$(python3 - <<'PY'
      import hashlib
      import os

      root = os.environ["ARTIFACT_DIR"]
      digest = hashlib.sha256()

      for dirpath, _, filenames in os.walk(root):
          filenames.sort()
          rel_dir = os.path.relpath(dirpath, root)
          if rel_dir == ".":
              rel_dir = ""
          for filename in filenames:
              rel_path = os.path.normpath(os.path.join(rel_dir, filename))
              digest.update(rel_path.replace(os.sep, "/").encode("utf-8"))
              file_path = os.path.join(dirpath, filename)
              with open(file_path, "rb") as handle:
                  for chunk in iter(lambda: handle.read(1024 * 1024), b""):
                      digest.update(chunk)

      print(digest.hexdigest())
      PY
      )

      HASH=$(echo "$HASH" | tr -d '\n\r')

      if [ -z "$HASH" ]; then
        echo "ERROR: Failed to compute Static Web App artifact hash"
        exit 1
      fi

      echo "Static Web App artifact hash: $HASH"
      echo "##vso[task.setvariable variable=SWAArtifactHash]$HASH"
      echo "##vso[task.setvariable variable=ShouldDeploySWA]true"
    displayName: "Compute SWA Artifact Hash"

  # Compare artifact hash with deployed hash stored in SWA app settings
  - task: AzureCLI@2
    displayName: "Evaluate SWA Deployment Hash"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -euo pipefail

        ARTIFACT_HASH="$(SWAArtifactHash)"
        APP_NAME="${{ parameters.staticWebAppName }}"
        RESOURCE_GROUP="${{ parameters.resourceGroupName }}"

        echo "Artifact hash: $ARTIFACT_HASH"

        set +e
        EXISTING_HASH=$(az staticwebapp appsettings list \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --query "properties.DEPLOY_PACKAGE_HASH" \
          -o tsv 2>/dev/null)
        CLI_EXIT=$?
        set -e

        if [ $CLI_EXIT -ne 0 ]; then
          echo "Unable to read existing deployment hash (Static Web App settings unavailable). Defaulting to deploy."
          SHOULD_DEPLOY=true
          EXISTING_HASH=""
        elif [ -z "$EXISTING_HASH" ]; then
          echo "No deployment hash stored for Static Web App. Proceeding with deployment."
          SHOULD_DEPLOY=true
        elif [ "$EXISTING_HASH" = "$ARTIFACT_HASH" ]; then
          echo "Static Web App artifact hash matches deployed hash. Skipping redeployment."
          SHOULD_DEPLOY=false
        else
          echo "Static Web App artifact hash differs from deployed hash. Redeploying."
          SHOULD_DEPLOY=true
        fi

        echo "Current deployed hash: ${EXISTING_HASH:-<none>}"
        echo "##vso[task.setvariable variable=ExistingSWAHash]$EXISTING_HASH"
        echo "##vso[task.setvariable variable=ShouldDeploySWA]$SHOULD_DEPLOY"

  - script: |
      echo "Static Web App artifact unchanged from last deployment. Skipping publish step."
    displayName: "Skip SWA Deployment"
    condition: and(succeeded(), eq(variables['ShouldDeploySWA'], 'false'))

  # Generate runtime configuration file (env-config.js)
  - task: AzureCLI@2
    displayName: "Generate Runtime Configuration"
    condition: and(succeeded(), eq(variables['ShouldDeploySWA'], 'true'))
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Generating runtime configuration file..."

        # Make script executable
        chmod +x $(Build.SourcesDirectory)/pipelines/scripts/generate-env-config.sh

        # Generate env-config.js in the SWA directory
        $(Build.SourcesDirectory)/pipelines/scripts/generate-env-config.sh \
          "${{ parameters.staticWebAppName }}" \
          "${{ parameters.resourceGroupName }}" \
          "$(Pipeline.Workspace)/drop/swa/env-config.js"

        # Verify file was created
        if [ ! -f "$(Pipeline.Workspace)/drop/swa/env-config.js" ]; then
          echo "ERROR: Failed to generate env-config.js"
          exit 1
        fi

        echo "✓ Runtime configuration file generated successfully"

  # Get Static Web App deployment token
  - task: AzureCLI@2
    displayName: "Get Deployment Token"
    condition: and(succeeded(), eq(variables['ShouldDeploySWA'], 'true'))
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Retrieving deployment token for ${{ parameters.staticWebAppName }}..."

        # Get deployment token
        DEPLOYMENT_TOKEN=$(az staticwebapp secrets list \
          --name ${{ parameters.staticWebAppName }} \
          --resource-group ${{ parameters.resourceGroupName }} \
          --query "properties.apiKey" \
          --output tsv)

        if [ -z "$DEPLOYMENT_TOKEN" ]; then
          echo "ERROR: Failed to retrieve deployment token"
          exit 1
        fi

        echo "✓ Deployment token retrieved successfully"
        echo "##vso[task.setvariable variable=DEPLOYMENT_TOKEN;issecret=true]$DEPLOYMENT_TOKEN"

  # Deploy to Azure Static Web Apps
  - task: AzureStaticWebApp@0
    displayName: "Deploy to Static Web App"
    condition: and(succeeded(), eq(variables['ShouldDeploySWA'], 'true'))
    inputs:
      azure_static_web_apps_api_token: $(DEPLOYMENT_TOKEN)
      app_location: "swa"
      output_location: ""
      skip_app_build: true
      cwd: "$(Pipeline.Workspace)/drop"

  # Wait for deployment propagation
  - script: |
      echo "Waiting 30 seconds for deployment to propagate..."
      sleep 30
    displayName: "Wait for Deployment Propagation"
    condition: and(succeeded(), eq(variables['ShouldDeploySWA'], 'true'))

  # Persist newly deployed hash to Static Web App settings
  - task: AzureCLI@2
    displayName: "Persist SWA Deployment Hash"
    condition: and(succeeded(), eq(variables['ShouldDeploySWA'], 'true'))
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -euo pipefail

        APP_NAME="${{ parameters.staticWebAppName }}"
        RESOURCE_GROUP="${{ parameters.resourceGroupName }}"
        ARTIFACT_HASH="$(SWAArtifactHash)"

        echo "Storing deployment hash on Static Web App..."
        az staticwebapp appsettings set \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --setting-names DEPLOY_PACKAGE_HASH="$ARTIFACT_HASH" \
          --output none

        echo "✓ Deployment hash updated successfully"

  # Get Static Web App URL
  - task: AzureCLI@2
    name: GetStaticWebAppUrl
    displayName: "Get Static Web App URL"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Retrieving Static Web App URL..."

        # Get default hostname
        HOSTNAME=$(az staticwebapp show \
          --name ${{ parameters.staticWebAppName }} \
          --resource-group ${{ parameters.resourceGroupName }} \
          --query "defaultHostname" \
          --output tsv)

        if [ -z "$HOSTNAME" ]; then
          echo "ERROR: Failed to retrieve Static Web App hostname"
          exit 1
        fi

        # Construct full URL
        SWA_URL="https://$HOSTNAME"

        echo "Static Web App URL: $SWA_URL"
        echo "##vso[task.setvariable variable=SWA_URL;isOutput=true]$SWA_URL"

  # Run smoke tests
  - script: |
      echo "Running Static Web App smoke tests..."

      # Make script executable
      chmod +x $(Build.SourcesDirectory)/pipelines/scripts/verify-frontend-deployment.sh

      SWA_URL_VALUE="$(GetStaticWebAppUrl.SWA_URL)"

      if [ -z "$SWA_URL_VALUE" ]; then
        echo "ERROR: Static Web App URL not available from previous step"
        exit 1
      fi

      # Run verification script
      $(Build.SourcesDirectory)/pipelines/scripts/verify-frontend-deployment.sh "$SWA_URL_VALUE"

      EXIT_CODE=$?

      if [ $EXIT_CODE -eq 0 ]; then
        echo "✓ All smoke tests passed"
      elif [ $EXIT_CODE -eq 2 ]; then
        echo "⚠ Some tests passed with warnings"
      else
        echo "✗ Smoke tests failed"
        exit 1
      fi
    displayName: "Run Smoke Tests"

  # Display deployment summary
  - script: |
      echo "=========================================="
      echo "DEPLOYMENT SUMMARY"
      echo "=========================================="
      echo ""
      echo "Environment: ${{ parameters.environment }}"
      echo "Static Web App: ${{ parameters.staticWebAppName }}"
      echo "Resource Group: ${{ parameters.resourceGroupName }}"
      echo ""
      SWA_URL_VALUE="$(GetStaticWebAppUrl.SWA_URL)"

      if [ -z "$SWA_URL_VALUE" ]; then
        echo "Deployment URL: <unavailable>"
      else
        echo "Deployment URL: $SWA_URL_VALUE"
      fi
      echo ""
      echo "Deployed Files:"
      echo "  ✓ Frontend Application (Svelte)"
      echo "  ✓ Static Assets (images, data)"
      echo "  ✓ Configuration (staticwebapp.config.json)"
      echo ""
      echo "Verification Status:"
      echo "  ✓ Artifact integrity verified"
      echo "  ✓ Deployment successful"
      echo "  ✓ Smoke tests passed"
      echo ""
      echo "=========================================="
    displayName: "Display Deployment Summary"
